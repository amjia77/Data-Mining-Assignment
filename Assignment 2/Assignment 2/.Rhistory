setwd("~/R")
x <- vector("numeric", length=10)
hist(x)
head(est_1)
n <- 5
est_1 <- vector("numeric", length = 10000)
est_2 <- vector("numeric", length = 10000)
est_3 <- vector("numeric", length = 10000)
for(i in 1:10000) {
set.seed(i)
x <- sample(1:357, n)
est_1[i] <- 2*mean(x)
est_2[i] <- mean(x) + 3 * sd(x)
est_3[i] <- ((n+1)/n) * max(x)
}
head(est_1)
x <- sample(1:357, n)
x
mean(x)
set.seed(1)
x <- sample(1:357, n)
x
mean(x)
x*mean(x)
2*mean(x)
22*23.9
525.8*20.9*23.8*25*24*21.7*23.8*22.8*23.1*23.1*23.5*23*23
2^2
2^3
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optim(1, f)$par
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optimize(1, f)$par
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optim(500, f)$par
gamma(2)
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(0, inf))
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(0, 600))
xmax
warnings()
f <- function(x) {((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(500, 600), maximum = T)
xmax
323.6/(14*599.99)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
data1 <- read.csv("specdata/001.csv")
data1[1]
class(data1)
data1$1
data1$"1"
head(data1)
data1$Data
data1$Date
x <- data.frame(num=1:4, bar=c(34, NA, 22, NA))
x
complete.cases(x)
is.na(x)
help(count)
vec <- complete.cases(x)
x[vec]
x[vec, ]
nrow(x[vec, ])
files_full <- list.files(specdata, full.names=TRUE)
files_full <- list.files("specdata", full.names=TRUE)
files_full[1]
x <- read.csv(files_full[1])
dat <- data.frame(id=i, nobs=nrow(x[complete.cases(data), ]))
dat <- data.frame(id=1, nobs=nrow(x[complete.cases(data), ]))
y <- c()
y
y[1] <- nrow(x[complete.cases(x)])
nrow(x[complete.cases(x)])
x[complete.cases(x)]
complete.cases(x)
x[complete.cases(x)]
data1
data1 <- data.frame(1:4, c(23, NA, 2, NA))
data1
data1[complete.cases(data1)]
x[complete.cases(x), ]
nrow(x[complete.cases(x), ])
y
y[1] <- nrow(x[complete.cases(x), ])
y
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[i])
num <- c()
for (j in length(iid)) {
num[j] <- nrow(x[complete.cases(x), ])
}
dat <- data.frame(id=iid, nobs=num)
dat
}
complete("specdata", 1)
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- c()
for (i in iid) {
j <- 1
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
length(c(2, 4, 8, 10, 12))
num <- vector("numeric", length=length(c(2, 4, 8, 10, 12))
num <- vector("numeric", length=length(c(2, 4, 8, 10, 12))
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- vector("numeric", length=length(iid))
for (i in iid) {
j <- 1
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", c(2, 4, 8, 10, 12))
x <- 1
x <- x+1
x
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- vector("numeric", length=length(iid))
j <- 1
for (i in iid) {
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25
complete("specdata", 30:25)
complete("specdata", 3)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
x <- mtcars[1:3]
x
y <- mtcars[4:6]
head(y)
cor(x,y)
comp <- complete("specdata", 1:332)
comp1 <- subset(comp, comp$nobs > 150)
head(comp1)
nrow(comp1)
x <- read.csv(files_full[2])
head(x)
cor(x$sulfate, x$nitrate, use="complete")
corr <- function(dir, threshold=0) {
comp <- complete(dir, 1:332)
comp1 <- subset(comp, comp$nobs > threshlod)
corres <- vector("numeric", length=nrow(comp1))
j <- 1
for (no in comp1$id) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[no])
corres[j] <- cor(x$sulfate, x$nitrate, use="complete")
j <- j+1
}
corres
}
cr <- corr("specdata", 150)
corr <- function(dir, threshold=0) {
comp <- complete(dir, 1:332)
comp1 <- subset(comp, comp$nobs > threshold)
corres <- vector("numeric", length=nrow(comp1))
j <- 1
for (no in comp1$id) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[no])
corres[j] <- cor(x$sulfate, x$nitrate, use="complete")
j <- j+1
}
corres
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
length(cr)
submit()
submit()
submit()
exp(0.60853)
exp(0.90497)
-5.43452 + (0.60853 * 7) + (0.90497 * 1)
exp(-0.26984)  / (1 + exp(-0.26984))
-5.43452 + (0.60853 * 7) + (0.90497 * 0)
exp(-1.17481)  / (1 + exp(-1.17481))
setwd ("~/UT/Data Mining/Assignment/Assignment 1/Assignment 1")
library(xlsx)
data <- read.xlsx("appmon_1.xls", sheetIndex=1, header=TRUE)           ## Read data
data$mouseclicks[data$mouseclicks > 200] <- 0      ## 1. Set mouseclicks[i] to 0 if it is an outlier (Value > 200)
data$keystrokes[data$keystrokess > 100] <- 0       ## 2. Set keystrokes[i] to 0 if it is an outlier (Value > 100)
options("digits.secs"=6)     ## Display actual_time in full precision
data$actual_time <- data$mSec.from.start/1e3 + ISOdatetime(2012,6,21,8,7,50)  ## 3. Extract the actual time at row i
## 4. Extract a Window Switch feature
for(i in 2:nrow(data)) {
if((data[i, "focus_app_name"] != data[i-1, "focus_app_name"]) & (data[i, "focus_app_title"] != data[i-1, "focus_app_title"])) {
data[i,"window.switch"] <- 1
}
else
data[i, "window.switch"] <- 0
}
data[1, "window.switch"] <- 0
## 5. Extract the number of opened windows
#  ##This statement DOES NOT work## data$num_of_opened_windows <- length(unlist(strsplit(as.character(data$opened_windows), "|", fixed=TRUE)))-1
for(i in 1:nrow(data)) {
data[i,"cat_of_opened_windows"] <- length(unlist(strsplit(as.character(data[i,"opened_windows"]), "|", fixed=TRUE)))-1
}
## 6. Extract a categorization of mousemoves
cat <- factor(c("No Move", "Slow", "Moderate", "Fast"))
for(i in 1:nrow(data)) {
if(data[i, "mousemoves"] == 0) {
data[i,"cat_of_mousemoves"] <- cat[1]
} else
if(0 < data[i, "mousemoves"] & data[i, "mousemoves"] < 36) {
data[i,"cat_of_mousemoves"] <- cat[2]
} else
if (36 <= data[i, "mousemoves"] & data[i, "mousemoves"] < 55) {
data[i,"cat_of_mousemoves"] <- cat[3]
} else
if (55 <= data[i, "mousemoves"]) {
data[i,"cat_of_mousemoves"] <- cat[4]
}
}
## 7. Unused features from the original set shall be deleted.
drops <- c("last_input_ms", "cpu_intensive_processes", "pc_locked_or_screensaver", "mousewheelmoves")
data1 <- data[,!(names(data) %in% drops)]
write.xlsx(x = data1, file = "appmon_1_out.xls")   ## 8. Save the new data in appmon_1_out.xls
setwd ("~/UT/Data Mining/Assignment/Assignment 2/Assignment 2")
###################################################################################
#####      Calculate Similarities                                             #####
###################################################################################
rateData <- read.table('Data for assgt 2/UI data for collaborative filtering.txt')
# head(rateData)
noUser <- 10
noItem <- 20
outputFile <- "updated UI matrix.txt"
# Create a helper function to calculate the Pearson correlation coefficient between two vectors
getPearson <- function(x, y) {
x.bar <- mean(x)
y.bar <- mean(y)
this.pearson <- sum((x-x.bar)*(y-y.bar)) / (sqrt(sum((x-x.bar)*(x-x.bar)))*sqrt(sum((y-y.bar)*(y-y.bar))))
return(this.pearson)
}
# Create a placeholder matrix of similarity user vs. user
similarity <- matrix(NA, noUser, noUser, dimnames=list(1:10, 1:10))
# Fill in the similarity matrix with the Pearson correlation coefficient
for(i in 1:noUser) {
for(j in 1:noUser) {
user.u <- rateData[which(rateData$V1==i),]
user.v <- rateData[which(rateData$V1==j),]
user.uv <- merge(x=user.u, y=user.v, by="V2")
similarity[i,j] <- getPearson(user.uv$V3.x, user.uv$V3.y)
}
}
# Back to dataframe and replace NA with zeros
similarity <- as.data.frame(similarity)
similarity[is.na(similarity)] <- 0
##############################################################################
#####               Predict ratings                                      #####
##############################################################################
# Convert the original user-item matrix to 10x20 format with missing values
rate <- matrix(NA, nrow=noUser,ncol=noItem,dimnames=list(1:noUser, 1:noItem))
for(i in 1:nrow(rateData)){
rate[rateData[i,1],rateData[i,2]] <- rateData[i,3]
}
# Create a placeholder matrix for the prediction
holder <- matrix(NA, nrow=nrow(rate), ncol=ncol(rate), dimnames=list(rownames(rate),colnames(rate)))
# Extract each user's average rating and store it in a vector
meanRating <- rowMeans(rate, na.rm = TRUE)
# Predict rating for missing values and place the prediction into placeholder matrix
for(i in 1:nrow(rate)) {                  # loop through the user
for(j in 1:ncol(rate)) {                # loop through the item
# check if the user already rated the item; if not, calculate the prediction rating
if(is.na(rate[i,j]))
{
holder[i,j] <- meanRating[i] + sum(similarity[i,]*(rate[,j]-meanRating), na.rm=TRUE)/sum(abs(similarity[i,]))
}
}
}
# Fill out the NA in prediction matrix (i.e., holder) with the actual rating given by original data
for(i in 1:nrow(holder)) {                  # loop through the user
for(j in 1:ncol(holder)) {                # loop through the item
# cell values with NA means that the user has already rated this item, so replace the NA with actual rating
if(is.na(holder[i,j]))
{
holder[i,j] <- rate[i,j]
}
}
}
# Round the outcome rating to 2 decimals
holder <- round(holder,0)
# Transfer to the initial user-item matrix format
holder.new <- matrix(NA, nrow=noUser*noItem, ncol=ncol(rateData))
holder.new[,1] <- rep(1:noUser, each=noItem)
holder.new[,2] <- rep(1:noItem, noUser)
for(i in 1:nrow(holder.new)){
holder.new[i,3] <- holder[holder.new[i,1],holder.new[i,2]]
}
# Back to data frame
holder.new <- as.data.frame(holder.new)
holder <- as.data.frame(holder)
# Store the updated user-item matrix in an output file
# write(t(holder.new), file = outputFile, ncolumns=ncol(holder.new), sep="\t")
write(t(holder), file = outputFile, ncolumns=ncol(holder), sep="\t")
View(data)
View(data1)
options("digits.secs"=4)     ## Display actual_time in full precision
data$actual_time <- data$mSec.from.start/1e3 + ISOdatetime(2012,6,21,8,7,50)  ## 3. Extract the actual time at row i
View(data)
options("digits.secs"=0)
data$actual_time <- data$mSec.from.start/1e3 + ISOdatetime(2012,6,21,8,7,50)  ## 3. Extract the actual time at row i
View(data)
drops <- c("last_input_ms", "cpu_intensive_processes", "pc_locked_or_screensaver", "mousewheelmoves")
data1 <- data[,!(names(data) %in% drops)]
write.xlsx(x = data1, file = "appmon_1_out.xls")
View(user.u)
View(data1)
